From 9d1697f260c3f6b4ae801401e7ed2d1c99d7127f Mon Sep 17 00:00:00 2001
From: Shane Freeder <theboyetronic@gmail.com>
Date: Mon, 2 Dec 2019 11:35:17 +0000
Subject: [PATCH] ConnectionInitEvent


diff --git a/api/src/main/java/io/github/waterfallmc/waterfall/event/ConnectionInitEvent.java b/api/src/main/java/io/github/waterfallmc/waterfall/event/ConnectionInitEvent.java
new file mode 100644
index 00000000..6f6c6226
--- /dev/null
+++ b/api/src/main/java/io/github/waterfallmc/waterfall/event/ConnectionInitEvent.java
@@ -0,0 +1,56 @@
+package io.github.waterfallmc.waterfall.event;
+
+import net.md_5.bungee.api.Callback;
+import net.md_5.bungee.api.config.ListenerInfo;
+import net.md_5.bungee.api.event.AsyncEvent;
+import net.md_5.bungee.api.event.ClientConnectEvent;
+import net.md_5.bungee.api.plugin.Cancellable;
+
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+
+import lombok.ToString;
+
+/**
+ * Represents a brand new connection made to the proxy, allowing for plugins to
+ * efficiently close a connection, useful for connection throttlers, etc
+ * @deprecated spigot added a variant of this event upstream, this class may be removed in the future
+ */
+@ToString
+@Deprecated
+public class ConnectionInitEvent extends ClientConnectEvent implements Cancellable {
+
+    private final SocketAddress remoteAddress;
+    private boolean isCancelled = false;
+
+    public ConnectionInitEvent(SocketAddress remoteAddress, ListenerInfo listener, Callback<ClientConnectEvent> done) {
+        super(remoteAddress, listener, done);
+        this.remoteAddress = remoteAddress;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.isCancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.isCancelled = cancel;
+    }
+
+    /**
+     * @return the INetSocketAddress of the connection being opened
+     * @deprecated BungeeCord can accept connections via Unix domain sockets
+     */
+    @Deprecated
+    public InetSocketAddress getRemoteAddress() {
+        return (InetSocketAddress) remoteAddress;
+    }
+
+    /**
+     * @return the SocketAddress of the connection being opened
+     */
+    public SocketAddress getRemoteSocketAddress() {
+        return remoteAddress;
+    }
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/event/ClientConnectEvent.java b/api/src/main/java/net/md_5/bungee/api/event/ClientConnectEvent.java
index 50ce034c..df5ffda7 100644
--- a/api/src/main/java/net/md_5/bungee/api/event/ClientConnectEvent.java
+++ b/api/src/main/java/net/md_5/bungee/api/event/ClientConnectEvent.java
@@ -1,12 +1,17 @@
 package net.md_5.bungee.api.event;
 
 import java.net.SocketAddress;
+
+import io.github.waterfallmc.waterfall.event.ConnectionInitEvent;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
+
+import net.md_5.bungee.api.Callback;
 import net.md_5.bungee.api.config.ListenerInfo;
 import net.md_5.bungee.api.plugin.Cancellable;
 import net.md_5.bungee.api.plugin.Event;
+import net.md_5.bungee.api.plugin.Listener;
 
 /**
  * Event called to represent an initial client connection.
@@ -14,10 +19,9 @@ import net.md_5.bungee.api.plugin.Event;
  * Note: This event is called at an early stage of every connection, handling
  * should be <b>fast</b>.
  */
-@Data
 @ToString(callSuper = false)
 @EqualsAndHashCode(callSuper = false)
-public class ClientConnectEvent extends Event implements Cancellable
+public class ClientConnectEvent extends AsyncEvent<ClientConnectEvent> implements Cancellable// Waterfall
 {
 
     /**
@@ -32,4 +36,20 @@ public class ClientConnectEvent extends Event implements Cancellable
      * Listener that accepted the connection.
      */
     private final ListenerInfo listener;
+
+    public ClientConnectEvent(SocketAddress remoteAddress, ListenerInfo listener, Callback<ClientConnectEvent> done) {
+        super(done);
+        socketAddress = remoteAddress;
+        this.listener = listener;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index 8969a5ed..4ad17d1a 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -1,6 +1,7 @@
 package net.md_5.bungee.netty;
 
 import com.google.common.base.Preconditions;
+import io.github.waterfallmc.waterfall.event.ConnectionInitEvent;
 import io.netty.buffer.PooledByteBufAllocator;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelException;
@@ -64,16 +65,23 @@ public class PipelineUtils
                 ch.close();
                 return;
             }
-
             ListenerInfo listener = ch.attr( LISTENER ).get();
 
-            if ( BungeeCord.getInstance().getPluginManager().callEvent( new ClientConnectEvent( remoteAddress, listener ) ).isCancelled() )
-            {
+            ConnectionInitEvent connectionInitEvent = new ConnectionInitEvent(ch.remoteAddress(), listener, (result, throwable) -> { // Waterfall
+
+            if (result.isCancelled()) {
                 ch.close();
                 return;
             }
 
+
+            try {
             BASE.initChannel( ch );
+            } catch (Exception e) {
+                e.printStackTrace();
+                ch.close();
+                return;
+            }
             ch.pipeline().addBefore( FRAME_DECODER, LEGACY_DECODER, new LegacyDecoder() );
             ch.pipeline().addAfter( FRAME_DECODER, PACKET_DECODER, new MinecraftDecoder( Protocol.HANDSHAKE, true, ProxyServer.getInstance().getProtocolVersion() ) );
             ch.pipeline().addAfter( FRAME_PREPENDER, PACKET_ENCODER, new MinecraftEncoder( Protocol.HANDSHAKE, true, ProxyServer.getInstance().getProtocolVersion() ) );
@@ -84,6 +92,9 @@ public class PipelineUtils
             {
                 ch.pipeline().addFirst( new HAProxyMessageDecoder() );
             }
+            }); // Waterfall
+
+            BungeeCord.getInstance().getPluginManager().callEvent(connectionInitEvent);
         }
     };
     public static final Base BASE = new Base();
-- 
2.25.0

